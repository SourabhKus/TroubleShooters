How to print QByteArray
-----------------------------------------------------------
    QString s;
    uchar c;
    
    for ( int i=0 ; i < data.size() ; i++ ){
        c = data[i];
        if ( c >= 0x20 && c <= 126 ) {
            s.append(c);
        } else {
            s.append(QString("<%1>").arg(c, 2, 16, QChar('0')));
        }
    }
    
    qDebug()<<"Implement here : "<<s;
    
How to make a QML Component a Singleton
---------------------------------------------------
Make a QML file with "pragma Singleton" as "MySingObj.qml"
pragma Singleton  
import QtQuick 2.0  
  
Item {  
    readonly property string colourBlue: "blue"  
    readonly property string colourRed: "red"  
    readonly property int fontPointSize: 16  
}  
Now in CPP
qmlRegisterSingletonType( QUrl("qrc:/path/MySingObj.qml"), "com.xyz.style", 1, 0, "MyStyle" );
Now you can use this in QML by 
///////
import com.xyz.style 1.0

MyStyle.colourBlue;
///////

Drag and Drop
------------------------------------------------

 Rectangle{
            id: win
            width: 500
            height: 450
            anchors.right: parent.right
            border.color: "black"

            Repeater {
                model: 10
                Rectangle {
                    id: rect
                    width: 50
                    height: 50
                    z: mouseArea.drag.active ||  mouseArea.pressed ? 2 : 1
                    color: Qt.rgba(Math.random(), Math.random(), Math.random(), 1)
                    x: Math.random() * (win.width / 2 - 100)
                    y: Math.random() * (win.height - 100)
                    property point beginDrag
                    property bool caught: false
                    border { width:2; color: "white" }
                    radius: 5
                    Drag.active: mouseArea.drag.active

                    Text {
                        anchors.centerIn: parent
                        text: index
                        color: "white"
                    }
                    MouseArea {
                        id: mouseArea
                        anchors.fill: parent
                        drag.target: parent
                        onPressed: {
                            rect.beginDrag = Qt.point(rect.x, rect.y);
                        }
                        onReleased: {
                            if(!rect.caught) {
                                backAnimX.from = rect.x;
                                backAnimX.to = beginDrag.x;
                                backAnimY.from = rect.y;
                                backAnimY.to = beginDrag.y;
                                backAnim.start()
                            }
                        }

                    }
                    ParallelAnimation {
                        id: backAnim
                        SpringAnimation { id: backAnimX; target: rect; property: "x"; duration: 500; spring: 2; damping: 0.2 }
                        SpringAnimation { id: backAnimY; target: rect; property: "y"; duration: 500; spring: 2; damping: 0.2 }
                    }
                }
            }

            Rectangle {
                anchors {
                    top: parent.top
                    right:  parent.right
                    bottom:  parent.bottom
                }
                width: parent.width / 2
                color: "gold"
                DropArea {
                    anchors.fill: parent
                    onEntered: drag.source.caught = true;
                    onExited: drag.source.caught = false;
                }
            }
        }
    }
